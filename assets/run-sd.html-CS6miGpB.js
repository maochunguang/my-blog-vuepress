import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as a,c as r,d as e,e as t,f as i,a as l}from"./app-DQRx02f7.js";const d={},c=e("h2",{id:"什么是stable-diffusion",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是stable-diffusion"},[e("span",null,[t("什么是"),e("strong",null,"stable-diffusion"),t("？")])])],-1),u=e("p",null,"Stable Diffusion是一个基于深度学习的文本到图像生成模型，它能够根据用户输入的文本描述生成高质量、高分辨率的图像。",-1),f=e("h2",{id:"本地部署准备",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#本地部署准备"},[e("span",null,"本地部署准备")])],-1),p={href:"https://github.com/AUTOMATIC1111/stable-diffusion-webui",target:"_blank",rel:"noopener noreferrer"},h=e("p",null,"参考我之前的文章进行环境准备。",-1),m=e("h2",{id:"本地部署",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#本地部署"},[e("span",null,"本地部署")])],-1),b={href:"https://github.com/AUTOMATIC1111/stable-diffusion-webui",target:"_blank",rel:"noopener noreferrer"},g=l(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、</p>`,2);function _(w,T){const n=s("ExternalLinkIcon");return a(),r("div",null,[c,u,f,e("p",null,[t("本文是基于win11+wsl2进行部署，显卡是2080魔改22g显存版本。基于"),e("a",p,[t("AUTOMATIC1111/stable-diffusion-webui"),i(n)]),t(" 来进行安装的。")]),h,m,e("p",null,[t("1、下载项目"),e("a",b,[t("AUTOMATIC1111/stable-diffusion-webui"),i(n)]),t(" ，")]),g])}const C=o(d,[["render",_],["__file","run-sd.html.vue"]]),v=JSON.parse('{"path":"/aigc/run-sd.html","title":"win11+wsl运行stable-diffusion","lang":"zh-CN","frontmatter":{"title":"win11+wsl运行stable-diffusion","icon":"fab fa-markdown","order":2,"category":["AIGC"],"tag":["sd"],"description":"什么是stable-diffusion？ Stable Diffusion是一个基于深度学习的文本到图像生成模型，它能够根据用户输入的文本描述生成高质量、高分辨率的图像。 本地部署准备 本文是基于win11+wsl2进行部署，显卡是2080魔改22g显存版本。基于AUTOMATIC1111/stable-diffusion-webui 来进行安装的。 ...","head":[["meta",{"property":"og:url","content":"https://codingmore.site/aigc/run-sd.html"}],["meta",{"property":"og:site_name","content":"Coding More"}],["meta",{"property":"og:title","content":"win11+wsl运行stable-diffusion"}],["meta",{"property":"og:description","content":"什么是stable-diffusion？ Stable Diffusion是一个基于深度学习的文本到图像生成模型，它能够根据用户输入的文本描述生成高质量、高分辨率的图像。 本地部署准备 本文是基于win11+wsl2进行部署，显卡是2080魔改22g显存版本。基于AUTOMATIC1111/stable-diffusion-webui 来进行安装的。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-23T14:49:47.000Z"}],["meta",{"property":"article:author","content":"Tommy"}],["meta",{"property":"article:tag","content":"sd"}],["meta",{"property":"article:modified_time","content":"2024-09-23T14:49:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"win11+wsl运行stable-diffusion\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-23T14:49:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tommy\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"什么是stable-diffusion？","slug":"什么是stable-diffusion","link":"#什么是stable-diffusion","children":[]},{"level":2,"title":"本地部署准备","slug":"本地部署准备","link":"#本地部署准备","children":[]},{"level":2,"title":"本地部署","slug":"本地部署","link":"#本地部署","children":[]}],"git":{"createdTime":1727102987000,"updatedTime":1727102987000,"contributors":[{"name":"maochunguang","email":"mcg915881127@163.com","commits":1}]},"readingTime":{"minutes":0.5,"words":150},"filePathRelative":"aigc/run-sd.md","localizedDate":"2024年9月23日","excerpt":"<h2>什么是<strong>stable-diffusion</strong>？</h2>\\n<p>Stable Diffusion是一个基于深度学习的文本到图像生成模型，它能够根据用户输入的文本描述生成高质量、高分辨率的图像。</p>\\n<h2>本地部署准备</h2>\\n<p>本文是基于win11+wsl2进行部署，显卡是2080魔改22g显存版本。基于<a href=\\"https://github.com/AUTOMATIC1111/stable-diffusion-webui\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">AUTOMATIC1111/stable-diffusion-webui</a> 来进行安装的。</p>","autoDesc":true}');export{C as comp,v as data};
