import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as l,d as n,e as s,f as a,b as u,a as p}from"./app-DQRx02f7.js";const r={},k=n("h1",{id:"rust实现一个gh-pages工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rust实现一个gh-pages工具"},[n("span",null,"rust实现一个gh-pages工具")])],-1),d=n("code",null,"nodejs",-1),m=n("code",null,"gh-pages",-1),g=n("code",null,"gh-pages",-1),h=n("code",null,"mdbook",-1),v=n("code",null,"gh_page_tool",-1),b=n("br",null,null,-1),_={href:"https://github.com/maochunguang/gh-page-tool",target:"_blank",rel:"noopener noreferrer"},f=p('<h2 id="实现原理分析" tabindex="-1"><a class="header-anchor" href="#实现原理分析"><span>实现原理分析</span></a></h2><p><code>gh_page_tool</code>使用的时候只有一个命令，<code>gh_page_tool publish -d book -b gh-pages</code>，这个命令行工具，有两个参数<code>-d</code>和<code>-b</code>，</p><ol><li><code>-d</code>代表静态博客的目录，默认值是book，这个是mdbook的默认输出目录</li><li><code>-b</code>代表发到github的哪个分支，默认是gh-pages分支，这是github的gh-pages功能的分支。</li></ol><h3 id="方案选择" tabindex="-1"><a class="header-anchor" href="#方案选择"><span>方案选择</span></a></h3><p>从上面的使用方式可以看出，这个命令行就是把某个目录文件，推送到远程的<code>gh-pages</code>分支。</p><ul><li><code>方案一</code>、在当前目录进行操作，调用git的命令进行commit和push。 <ul><li>优点：实现起来简单</li><li>缺点：容易对源项目的提交和内容产生影响</li></ul></li><li><code>方案二</code>、创建一个临时目录，把内容复制到临时目录，在临时目录操作，最后删除临时目录。 <ul><li>优点：对原项目无干扰，</li><li>缺点：实现复杂，性能会慢一点点，但对于rust来说不是问题。<br> 综合来看，个人感觉对于原项目不能造成干扰，做好一个工具应该做的事情，因此选用<code>方案二</code>。</li></ul></li></ul><h3 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图"><span>流程图</span></a></h3><p>下面是一个publish命令的简单执行流程。</p>',8),y=p(`<h2 id="开始实现功能" tabindex="-1"><a class="header-anchor" href="#开始实现功能"><span>开始实现功能</span></a></h2><h3 id="步骤-1-创建rust项目" tabindex="-1"><a class="header-anchor" href="#步骤-1-创建rust项目"><span>步骤 1：创建<code>Rust</code>项目</span></a></h3><p>首先，创建一个新的 Rust 项目：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cargo</span> new gh_page_tool
<span class="token builtin class-name">cd</span> gh_page_tool
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤-2-添加依赖并配置" tabindex="-1"><a class="header-anchor" href="#步骤-2-添加依赖并配置"><span>步骤 2：添加依赖并配置</span></a></h3><p>在项目的 <code>Cargo.toml</code> 文件中添加如下依赖。</p><ol><li><code>clap</code>是用来构建命令行工具的。</li><li><code>fs_extra</code>是用来复制文件夹，简化操作。</li><li><code>tempfile</code>是创建临时文件，支持自动销毁。</li></ol><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">clap</span> <span class="token punctuation">=</span> <span class="token string">&quot;4.4.0&quot;</span>
<span class="token key property">fs_extra</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.2.0&quot;</span> 
<span class="token key property">tempfile</span> <span class="token punctuation">=</span> <span class="token string">&quot;3.2.0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后运行 <code>cargo build</code> 以安装依赖项。</p><h3 id="步骤-3-解析命令行参数" tabindex="-1"><a class="header-anchor" href="#步骤-3-解析命令行参数"><span>步骤 3：解析命令行参数</span></a></h3><p>在 <code>src/main.rs</code> 中，使用 <code>clap</code> 来构建命令行接口并解析参数：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">clap<span class="token punctuation">::</span></span><span class="token punctuation">{</span>arg<span class="token punctuation">,</span> <span class="token class-name">Command</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">publish_lib</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> matches <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;gh_page&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">&quot;tommy&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token string">&quot;Implements gh-pages like functionality&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subcommand</span><span class="token punctuation">(</span>
            <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;publish&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token string">&quot;Publishes a directory to a gh-pages branch&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token macro property">arg!</span><span class="token punctuation">(</span><span class="token operator">-</span>d <span class="token operator">-</span><span class="token operator">-</span>directory <span class="token operator">&lt;</span><span class="token constant">DIRECTORY</span><span class="token operator">&gt;</span> <span class="token string">&quot;Sets the directory to publish&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token macro property">arg!</span><span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">-</span><span class="token operator">-</span>branch <span class="token operator">&lt;</span><span class="token constant">BRANCH</span><span class="token operator">&gt;</span> <span class="token string">&quot;Sets the branch to publish to&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get_matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span> <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">subcommand_matches</span><span class="token punctuation">(</span><span class="token string">&quot;publish&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> default_dir <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> default_branch <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;gh-pages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> directory <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">get_one</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;directory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>default_dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> branch <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">get_one</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;branch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>default_branch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token namespace">publish_lib<span class="token punctuation">::</span></span><span class="token function">publish</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> branch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤-4-实现publish功能" tabindex="-1"><a class="header-anchor" href="#步骤-4-实现publish功能"><span>步骤 4：实现publish功能</span></a></h3><p>实现 <code>publish</code> 函数以完成推送工作。<br> 这里有几个点需要注意：</p><ol><li>复制文件到temp时，复制的是整个<code>book</code>文件夹，后面执行git操作需要到<code>book</code>目录下面。</li><li>复制git config文件需要在git init之后，要不然config文件会覆盖。</li><li>复制过git config文件后，需要切换到git项目的目录，防止因为路径出问题。</li><li><code>dest_path = dest_path.join(directory);</code>是把目录切换到<code>book</code>目录。</li></ol><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fs<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token class-name">Command</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">tempfile<span class="token punctuation">::</span></span><span class="token class-name">TempDir</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">publish</span><span class="token punctuation">(</span>directory<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> branch<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建临时目录</span>
    <span class="token keyword">let</span> temp_dir <span class="token operator">=</span> <span class="token class-name">TempDir</span><span class="token punctuation">::</span><span class="token function">new_in</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to create temp directory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> temp_dir_path <span class="token operator">=</span> temp_dir<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> source_path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Path</span> <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 确保目录存在</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>source_path<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Directory :{} does not exist&quot;</span><span class="token punctuation">,</span> directory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 复制文件到临时目录</span>
    <span class="token comment">// 这里我们假设 \`directory\` 是一个文件夹路径</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> dest_path <span class="token operator">=</span> temp_dir_path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;gh_page_content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 目录不存在，创建目录</span>
    <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dest_path<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;created temp dir {} Success&quot;</span><span class="token punctuation">,</span> dest_path<span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>dest_path<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Directory :{} does not exist&quot;</span><span class="token punctuation">,</span> dest_path<span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 复制 .git 配置到临时目录</span>
    <span class="token keyword">let</span> git_config_path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;.git/config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">copy_dir_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>source_path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dest_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 切换到book目录</span>
    dest_path <span class="token operator">=</span> dest_path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在临时目录中进行 Git 操作</span>
    <span class="token comment">// 初始化 Git 仓库</span>
    <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;git&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">&quot;init&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">current_dir</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dest_path<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to initialize git&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>status<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to initialize git repository&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;git init success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 复制 .git 配置到临时目录</span>
    <span class="token keyword">if</span> git_config_path<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> target_config_path <span class="token operator">=</span> dest_path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;.git/config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span>
            <span class="token string">&quot;git copy config start  source:{} , target:{}&quot;</span><span class="token punctuation">,</span>
            git_config_path<span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            target_config_path<span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span>git_config_path<span class="token punctuation">,</span> target_config_path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to copy .git/config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;git copy config success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;No .git/config found in the root directory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 切换到临时目录</span>
    <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">set_current_dir</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dest_path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to change to temp directory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;git&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">&quot;checkout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-b&quot;</span><span class="token punctuation">,</span> branch<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to checkout branch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>status<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to  checkout branch: {}&quot;</span><span class="token punctuation">,</span> branch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;git checkout {} success!&quot;</span><span class="token punctuation">,</span> branch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 以此类推，添加 git add, git commit 和 git push 的操作</span>
    <span class="token comment">// ......    </span>

   
    <span class="token comment">// 退出临时目录</span>
    <span class="token comment">// 临时目录将在 \`temp_dir\` 变量离开作用域时自动删除</span>
    <span class="token keyword">let</span> _ <span class="token operator">=</span> temp_dir<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;drop temp dir failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 递归复制目录</span>
<span class="token keyword">fn</span> <span class="token function-definition function">copy_dir_all</span><span class="token punctuation">(</span>src<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Path</span><span class="token punctuation">,</span> dst<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token namespace">fs_extra<span class="token punctuation">::</span>dir<span class="token punctuation">::</span></span><span class="token class-name">CopyOptions</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认选项</span>
    <span class="token namespace">fs_extra<span class="token punctuation">::</span>dir<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> <span class="token operator">&amp;</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to copy directory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;copy_dir_all to temp success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想给命令行工具发布到cargo，开源参考我的两个文章。</p>`,17),q={href:"https://zhuanlan.zhihu.com/p/668756184",target:"_blank",rel:"noopener noreferrer"},w={href:"https://zhuanlan.zhihu.com/p/669543058",target:"_blank",rel:"noopener noreferrer"},x=p(`<h3 id="步骤-5-copy命令行工具" tabindex="-1"><a class="header-anchor" href="#步骤-5-copy命令行工具"><span>步骤 5：copy命令行工具</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cargo</span> build
<span class="token function">cp</span> target/debug/gh_page_tool ~/.cargo/bin/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤-6-验证成果" tabindex="-1"><a class="header-anchor" href="#步骤-6-验证成果"><span>步骤 6：验证成果</span></a></h3><p>找个<code>mdbook</code>的测试项目，或者<code>gitbook</code>的，在项目根目录执行 <code>gh_page_tool publish -d book -b gh-pages</code>。</p><figure><img src="https://blog-pics-1252092369.cos.ap-beijing.myqcloud.com/WindowsTerminal_XRVOWODeCB.png" alt="验证成果" tabindex="0" loading="lazy"><figcaption>验证成果</figcaption></figure><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,6),T={href:"https://www.npmjs.com/package/gh-pages",target:"_blank",rel:"noopener noreferrer"},z={href:"https://docs.rs/clap/4.4.0/clap/index.html",target:"_blank",rel:"noopener noreferrer"};function C(j,P){const t=o("ExternalLinkIcon"),e=o("Mermaid");return i(),l("div",null,[k,n("p",null,[d,s("有个"),m,s("包，可以把项目里的某个文件夹发布到"),g,s("非常方便，因此想用rust实现一个版本，对于rust生态的用户来说，多一个选择。这样使用"),h,s("和"),v,s("可以非常方便的管理自己的博客。"),b,s(" 完整代码在github，"),n("a",_,[s("gh_page_tool地址"),a(t)]),s("。")]),u(" more "),f,a(e,{id:"mermaid-73",code:"eJxLL0osyFAIceJSAAJHjad7Gp4u7y4oTcrJLM7QVNDVtVNw0nixfPGzeROeTtz7ZPeSp/1Nz6Zu0AQrxyoD1uOs8bRj9tPdu0pScwuez173dO9UiA4s4mD1LhpPl/Q+7dj2cu7MZw2NL7a2PNs14WnHBpAyiEZ8CsAmuGo8nbMCxH2yozs9s0QhMy+zBKIVqwxYjxvUUJBocn5eWmb6s2ntT3Zvg+jDKQvW667xrHP5i4U9YNmM1OTs/FKofVhlwHo8kGQSU1IgytEFwSo9kc3Iz82F+QWLOFi9F5J4QSkw5sCqMUTBar01QIHxon3V064VL6c0PFvfqMnFBQALyOY9"}),y,n("ol",null,[n("li",null,[s("发布到crate教程： "),n("a",q,[s("https://zhuanlan.zhihu.com/p/668756184"),a(t)])]),n("li",null,[s("支持代码提示教程："),n("a",w,[s("https://zhuanlan.zhihu.com/p/669543058"),a(t)])])]),x,n("ol",null,[n("li",null,[s("gh-pages插件："),n("a",T,[s("https://www.npmjs.com/package/gh-pages"),a(t)])]),n("li",null,[s("clap包："),n("a",z,[s("https://docs.rs/clap/4.4.0/clap/index.html"),a(t)])])])])}const S=c(r,[["render",C],["__file","rust-gh-pages-tool.html.vue"]]),O=JSON.parse('{"path":"/rust-study/rust-gh-pages-tool.html","title":"rust实现一个gh-pages工具","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2023-12-16T00:00:00.000Z","category":["Rust入门到放弃"],"tag":["Rust","命令行","博客工具"],"description":"rust实现一个gh-pages工具 nodejs有个gh-pages包，可以把项目里的某个文件夹发布到gh-pages非常方便，因此想用rust实现一个版本，对于rust生态的用户来说，多一个选择。这样使用mdbook和gh_page_tool可以非常方便的管理自己的博客。 完整代码在github，gh_page_tool地址。 实现原理分析 gh_...","head":[["meta",{"property":"og:url","content":"https://codingmore.site/rust-study/rust-gh-pages-tool.html"}],["meta",{"property":"og:site_name","content":"Coding More"}],["meta",{"property":"og:title","content":"rust实现一个gh-pages工具"}],["meta",{"property":"og:description","content":"rust实现一个gh-pages工具 nodejs有个gh-pages包，可以把项目里的某个文件夹发布到gh-pages非常方便，因此想用rust实现一个版本，对于rust生态的用户来说，多一个选择。这样使用mdbook和gh_page_tool可以非常方便的管理自己的博客。 完整代码在github，gh_page_tool地址。 实现原理分析 gh_..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog-pics-1252092369.cos.ap-beijing.myqcloud.com/WindowsTerminal_XRVOWODeCB.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-22T15:50:45.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"rust实现一个gh-pages工具"}],["meta",{"property":"article:author","content":"Tommy"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:tag","content":"命令行"}],["meta",{"property":"article:tag","content":"博客工具"}],["meta",{"property":"article:published_time","content":"2023-12-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-22T15:50:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"rust实现一个gh-pages工具\\",\\"image\\":[\\"https://blog-pics-1252092369.cos.ap-beijing.myqcloud.com/WindowsTerminal_XRVOWODeCB.png\\"],\\"datePublished\\":\\"2023-12-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-22T15:50:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tommy\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"实现原理分析","slug":"实现原理分析","link":"#实现原理分析","children":[{"level":3,"title":"方案选择","slug":"方案选择","link":"#方案选择","children":[]},{"level":3,"title":"流程图","slug":"流程图","link":"#流程图","children":[]}]},{"level":2,"title":"开始实现功能","slug":"开始实现功能","link":"#开始实现功能","children":[{"level":3,"title":"步骤 1：创建Rust项目","slug":"步骤-1-创建rust项目","link":"#步骤-1-创建rust项目","children":[]},{"level":3,"title":"步骤 2：添加依赖并配置","slug":"步骤-2-添加依赖并配置","link":"#步骤-2-添加依赖并配置","children":[]},{"level":3,"title":"步骤 3：解析命令行参数","slug":"步骤-3-解析命令行参数","link":"#步骤-3-解析命令行参数","children":[]},{"level":3,"title":"步骤 4：实现publish功能","slug":"步骤-4-实现publish功能","link":"#步骤-4-实现publish功能","children":[]},{"level":3,"title":"步骤 5：copy命令行工具","slug":"步骤-5-copy命令行工具","link":"#步骤-5-copy命令行工具","children":[]},{"level":3,"title":"步骤 6：验证成果","slug":"步骤-6-验证成果","link":"#步骤-6-验证成果","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1708617045000,"updatedTime":1708617045000,"contributors":[{"name":"maochunguang","email":"mcg915881127@163.com","commits":1}]},"readingTime":{"minutes":4.79,"words":1437},"filePathRelative":"rust-study/rust-gh-pages-tool.md","localizedDate":"2023年12月16日","excerpt":"\\n<p><code>nodejs</code>有个<code>gh-pages</code>包，可以把项目里的某个文件夹发布到<code>gh-pages</code>非常方便，因此想用rust实现一个版本，对于rust生态的用户来说，多一个选择。这样使用<code>mdbook</code>和<code>gh_page_tool</code>可以非常方便的管理自己的博客。<br>\\n完整代码在github，<a href=\\"https://github.com/maochunguang/gh-page-tool\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">gh_page_tool地址</a>。</p>\\n","autoDesc":true}');export{S as comp,O as data};
