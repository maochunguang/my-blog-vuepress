import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c,d as l,e as n,f as s,b as t,a as i}from"./app-IBgw4ifT.js";const u={},r=n("h1",{id:"rust宏实现mapstruct",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rust宏实现mapstruct"},[n("span",null,[s("rust宏实现"),n("code",null,"mapstruct")])])],-1),d=n("p",null,[s("在java生态有个bean转换工具，叫做"),n("code",null,"mapstruct"),s("，可以非常方便的进行bean之间的转换。原理就是可以在代码编译的时候生成转换的方法。而rust本身的宏也支持在编译的时候生成代码，因此打算用"),n("strong",null,"属性宏"),s("简单实现一个"),n("code",null,"mapstruct"),s("。")],-1),k=i(`<h2 id="rust宏相关知识" tabindex="-1"><a class="header-anchor" href="#rust宏相关知识"><span>rust宏相关知识</span></a></h2><p>在 Rust 中宏分为两大类：声明式宏( declarative macros ) macro_rules! 和三种过程宏( procedural macros ):</p><ol><li>派生宏(Derive Macros)，在之前多次见到的，可以为目标结构体或枚举派生指定的代码，例如 Debug 特征；</li><li>类属性宏(Attribute-like macro)，用于为目标添加自定义的属性；</li><li>类函数宏(Function-like macro)，看上去就像是函数调用；<br><strong>详细的宏相关知识看结尾的文章链接。</strong> <a href="#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99">跳转到链接</a></li></ol><h2 id="实现原理分析" tabindex="-1"><a class="header-anchor" href="#实现原理分析"><span>实现原理分析</span></a></h2><p>rust如果要bean之间互相转换，也很简单，可以实现<code>From</code>方法，在<code>From</code>方法里实现bean的转换赋值即可。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">PersonDto</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token class-name">Person</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">PersonDto</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">PersonDto</span> <span class="token punctuation">{</span>
        <span class="token class-name">PersonDto</span> <span class="token punctuation">{</span>
            name<span class="token punctuation">:</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
            age<span class="token punctuation">:</span> item<span class="token punctuation">.</span>age<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> dto<span class="token punctuation">:</span> <span class="token class-name">PersonDto</span> <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用自动生成的 From 实现进行转换</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;dto: name:{}, age:{}&quot;</span><span class="token punctuation">,</span> dto<span class="token punctuation">.</span>name<span class="token punctuation">,</span> dto<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此如果要用rust的宏来实现，我们需要让宏来自动生成这个<code>From</code>方法，这样就可以实现自动转换。<br> 为了使用简单，我参考了<code>diesel</code>框架的<code>#[diesel(table_name = blog_users)]</code>这种使用方法。我们的宏使用的时候直接在结构体上加上<code>#[auto_map(target = &quot;PersonDto&quot;)]</code>就可以了，非常的简洁优雅。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[auto_map(target = <span class="token string">&quot;PersonDto&quot;</span>)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h2><p>由于宏的使用方法是<code>#[auto_map(target = &quot;PersonDto&quot;)]</code>，因此宏的工作流程也基本确定了，以Person和PersonDto结构体为例子，大致的工作流程如下：</p><ol><li>提取宏auto_map的&quot;target&quot; 参数。</li><li>解析输入的结构体（PersonDto）。</li><li>提取输入结构体的字段名称和类型。</li><li>解析目标类型。</li><li>重新生成原始结构体和From方法实现。</li></ol><h3 id="第一步-创建工程-加依赖" tabindex="-1"><a class="header-anchor" href="#第一步-创建工程-加依赖"><span>第一步，创建工程，加依赖</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cargo</span> new rust_mapstruct <span class="token parameter variable">--lib</span>
<span class="token builtin class-name">cd</span> rust_mapstruct
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为宏定义生成代码需要解析rust的ast，因此需要依赖两个关键的库，quote，syn。因为要定义宏生成代码，因此需要指定<code>proc-macro = true</code>。<br> 整体依赖如下：</p><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">lib</span><span class="token punctuation">]</span>
<span class="token key property">proc-macro</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>

<span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">proc-macro2</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.0&quot;</span>
<span class="token key property">quote</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.0&quot;</span>
<span class="token key property">syn</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.0.17&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;full&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二步-修改lib-rs核心代码" tabindex="-1"><a class="header-anchor" href="#第二步-修改lib-rs核心代码"><span>第二步，修改lib.rs核心代码</span></a></h3><h4 id="_1、定义核心方法" tabindex="-1"><a class="header-anchor" href="#_1、定义核心方法"><span>1、定义核心方法</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[proc_macro_attribute]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">auto_map</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> <span class="token class-name">TokenStream</span><span class="token punctuation">,</span> input<span class="token punctuation">:</span> <span class="token class-name">TokenStream</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">TokenStream</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、提取并解析-target-参数" tabindex="-1"><a class="header-anchor" href="#_2、提取并解析-target-参数"><span>2、提取并解析 &quot;target&quot; 参数</span></a></h4><p>这里是可以解析多个参数的，因为这个mapstruct工具只有一个参数，所以直接用<code>target</code>字符串匹配了，喜欢扩展的同学，可以在这个基础上加参数，增加功能。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token macro property">parse_macro_input!</span><span class="token punctuation">(</span>args <span class="token keyword">as</span> <span class="token class-name">AttributeArgs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 提取并解析 &quot;target&quot; 参数</span>
    <span class="token keyword">let</span> target_type <span class="token operator">=</span> args
        <span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">find_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>arg<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">NestedMeta</span><span class="token punctuation">::</span><span class="token class-name">Meta</span><span class="token punctuation">(</span><span class="token class-name">Meta</span><span class="token punctuation">::</span><span class="token class-name">NameValue</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> arg <span class="token punctuation">{</span>
                <span class="token keyword">if</span> m<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">is_ident</span><span class="token punctuation">(</span><span class="token string">&quot;target&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Lit</span><span class="token punctuation">::</span><span class="token class-name">Str</span><span class="token punctuation">(</span>lit<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>m<span class="token punctuation">.</span>lit <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>lit<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">None</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;auto_map requires a &#39;target&#39; argument&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、解析输入的结构体-persondto" tabindex="-1"><a class="header-anchor" href="#_3、解析输入的结构体-persondto"><span>3、解析输入的结构体（PersonDto）</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>      <span class="token comment">// 解析输入的结构体</span>
      <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token macro property">parse_macro_input!</span><span class="token punctuation">(</span>input <span class="token keyword">as</span> <span class="token class-name">DeriveInput</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> struct_name <span class="token operator">=</span> input<span class="token punctuation">.</span>ident<span class="token punctuation">;</span>
  
      <span class="token keyword">let</span> struct_data <span class="token operator">=</span> <span class="token keyword">match</span> input<span class="token punctuation">.</span>data <span class="token punctuation">{</span>
          <span class="token class-name">Data</span><span class="token punctuation">::</span><span class="token class-name">Struct</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">,</span>
          _ <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;auto_map only supports structs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、提取persondto字段名称和类型" tabindex="-1"><a class="header-anchor" href="#_4、提取persondto字段名称和类型"><span>4、提取PersonDto字段名称和类型</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>    <span class="token keyword">let</span> <span class="token punctuation">(</span>field_names<span class="token punctuation">,</span> field_mappings<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> struct_data<span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>f<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
          <span class="token keyword">let</span> field_name <span class="token operator">=</span> f<span class="token punctuation">.</span>ident<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">let</span> field_type <span class="token operator">=</span> <span class="token operator">&amp;</span>f<span class="token punctuation">.</span>ty<span class="token punctuation">;</span>
          <span class="token punctuation">(</span>field_name<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token macro property">quote!</span> <span class="token punctuation">{</span> #field_name<span class="token punctuation">:</span> #field_type <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unzip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、解析目标类型-persondto" tabindex="-1"><a class="header-anchor" href="#_5、解析目标类型-persondto"><span>5、解析目标类型(PersonDto)</span></a></h4><p><code>syn::parse_str</code>可以把字符串解析为rust的类型。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code> <span class="token comment">// 解析目标类型</span>
      <span class="token keyword">let</span> target_type_tokens <span class="token operator">=</span> <span class="token namespace">syn<span class="token punctuation">::</span></span><span class="token function">parse_str</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token namespace">syn<span class="token punctuation">::</span></span><span class="token class-name">Type</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>target_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6、生成原始结构体和from方法实现" tabindex="-1"><a class="header-anchor" href="#_6、生成原始结构体和from方法实现"><span>6、生成原始结构体和From方法实现</span></a></h4><p>这里quote里的代码就是一个简单的模板引擎，用过模板引擎写页面的应该都比较熟悉。第一个struct是Person，下面的是From方法，就是把宏里解析出来的参数在模板引擎里拼接一下，就能生成代码了。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token comment">// 重新生成原始结构体和转换实现</span>
      <span class="token keyword">let</span> expanded <span class="token operator">=</span> <span class="token macro property">quote!</span> <span class="token punctuation">{</span>
          <span class="token comment">// 注意这里是生成原结构体Person</span>
          <span class="token keyword">pub</span> <span class="token keyword">struct</span> #struct_name <span class="token punctuation">{</span>
              #<span class="token punctuation">(</span> #field_mappings<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token operator">*</span>
          <span class="token punctuation">}</span>
  
          <span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span>#struct_name<span class="token operator">&gt;</span> <span class="token keyword">for</span> #target_type_tokens <span class="token punctuation">{</span>
              <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> #struct_name<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> #target_type_tokens <span class="token punctuation">{</span>
                  #target_type_tokens <span class="token punctuation">{</span>
                      #<span class="token punctuation">(</span> #field_names<span class="token punctuation">:</span> item<span class="token punctuation">.</span>#field_names<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token operator">*</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
  
      expanded<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="踩坑记录" tabindex="-1"><a class="header-anchor" href="#踩坑记录"><span>踩坑记录</span></a></h4><p>生成代码这里有个坑，我之前的思路是只生成<code>From</code>方法，而不生成原结构体Person，这就导致在测试时，编译找不到Person结构，在网上找了很多资料，现在的猜测就是宏在结构体上时，需要自己把原结构代码生成一遍，否则相当于丢失代码。报错信息如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>error<span class="token punctuation">[</span>E0412<span class="token punctuation">]</span>: cannot <span class="token function">find</span> <span class="token builtin class-name">type</span> <span class="token variable"><span class="token variable">\`</span>Person<span class="token variable">\`</span></span> <span class="token keyword">in</span> this scope
 --<span class="token operator">&gt;</span> src/main.rs:4:12
  <span class="token operator">|</span>
<span class="token number">4</span> <span class="token operator">|</span> pub struct Person <span class="token punctuation">{</span>
  <span class="token operator">|</span>            ^^^^^^ not found <span class="token keyword">in</span> this scope
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法有两个，第一个是先定义一次Person，这种太奇怪了，而且也失去了这个宏的意义，都定义两次结构体了，还搞什么自动转换啊。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>    <span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
        age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token attribute attr-name">#[auto_map(target = <span class="token string">&quot;PersonDto&quot;</span>)]</span>
    <span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
        age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个就是生成原始的结构体，把Person也生成一遍，这样就不会找不到结构体了。</p><h3 id="第三步-用项目测试宏" tabindex="-1"><a class="header-anchor" href="#第三步-用项目测试宏"><span>第三步，用项目测试宏</span></a></h3><p>先把宏的项目编译一下，在命令行执行<code>cargo build</code>。<br> 新创建一个测试项目，</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cargo</span> new test-mapstruct
<span class="token builtin class-name">cd</span> test-mapstruct
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改cargo-toml依赖关系" tabindex="-1"><a class="header-anchor" href="#修改cargo-toml依赖关系"><span>修改Cargo.toml依赖关系</span></a></h4><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">rust_mapstruct</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">path</span> <span class="token punctuation">=</span> <span class="token string">&quot;../rust_mapstruct&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用main-rs写一个简单的测试例子" tabindex="-1"><a class="header-anchor" href="#用main-rs写一个简单的测试例子"><span>用main.rs写一个简单的测试例子</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">rust_mapstruct<span class="token punctuation">::</span></span>auto_map<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[auto_map(target = <span class="token string">&quot;PersonDto&quot;</span>)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">PersonDto</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> dto<span class="token punctuation">:</span> <span class="token class-name">PersonDto</span> <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用自动生成的 From 实现进行转换</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;dto: name:{}, age:{}&quot;</span><span class="token punctuation">,</span> dto<span class="token punctuation">.</span>name<span class="token punctuation">,</span> dto<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="执行代码看成果" tabindex="-1"><a class="header-anchor" href="#执行代码看成果"><span>执行代码看成果</span></a></h4><p>在test-mapstruct项目执行<code>cargo build</code>,<code>cargo run</code>，看成果！</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>❯ <span class="token function">cargo</span> build
   Compiling test-mapstruct v0.1.0 <span class="token punctuation">(</span>/home/maocg/study/test-mapstruct<span class="token punctuation">)</span>
    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.26s

test-mapstruct on  master 
❯ <span class="token function">cargo</span> run
    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.00s
     Running <span class="token variable"><span class="token variable">\`</span>target/debug/test-mapstruct<span class="token variable">\`</span></span>
dto: name:Alice, age:30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关资料" tabindex="-1"><a class="header-anchor" href="#相关资料"><span>相关资料</span></a></h2>`,48),m={href:"https://docs.rs/syn/latest/syn/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.rs/quote/latest/quote/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/dtolnay/cargo-expand",target:"_blank",rel:"noopener noreferrer"},g={href:"https://doc.rust-lang.org/reference/introduction.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zjp-cn.github.io/tlborm/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://veykril.github.io/tlborm/",target:"_blank",rel:"noopener noreferrer"};function y(_,w){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,d,l(" more "),k,n("ol",null,[n("li",null,[s("syn包："),n("a",m,[s("https://docs.rs/syn/latest/syn/"),t(a)])]),n("li",null,[s("quote包："),n("a",v,[s("https://docs.rs/quote/latest/quote/"),t(a)])]),n("li",null,[s("rust-expand："),n("a",b,[s("https://github.com/dtolnay/cargo-expand"),t(a)])]),n("li",null,[s("rust官方文档："),n("a",g,[s("https://doc.rust-lang.org/reference/introduction.html"),t(a)])]),n("li",null,[s("宏小册中文版："),n("a",h,[s("https://zjp-cn.github.io/tlborm/"),t(a)])]),n("li",null,[s("宏小册英文版："),n("a",f,[s("https://veykril.github.io/tlborm/"),t(a)])])])])}const P=e(u,[["render",y],["__file","rust-macro-mapstruct.html.vue"]]);export{P as default};
