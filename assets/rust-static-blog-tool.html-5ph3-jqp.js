import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as u,c as l,a as n,f as s,b as a,e as p}from"./app-l-KxxR4c.js";const i={},k=n("h1",{id:"rust写一个静态博客工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rust写一个静态博客工具"},[n("span",null,"rust写一个静态博客工具")])],-1),r=n("strong",null,"github链接",-1),d={href:"https://github.com/maochunguang/rust-md-site-tool",target:"_blank",rel:"noopener noreferrer"},m={href:"http://xn--summary-qr7k68x.md",target:"_blank",rel:"noopener noreferrer"},v=p(`<h2 id="第一步-设计博客工具" tabindex="-1"><a class="header-anchor" href="#第一步-设计博客工具"><span>第一步，设计博客工具</span></a></h2><h3 id="目录和样式设计" tabindex="-1"><a class="header-anchor" href="#目录和样式设计"><span>目录和样式设计</span></a></h3><p>这个简易的博客/站点工具主要是模仿gitbook，可以认为是gitbook的简易版。页面布局也是gitbook一样，左边是目录，右边是内容。</p><figure><img src="https://blog-pics-1252092369.cos.ap-beijing.myqcloud.com/QdyHIFCMFe.png" alt="博客样式" tabindex="0" loading="lazy"><figcaption>博客样式</figcaption></figure><p>首先需要定义一个博客的静态目录结构，如下图所示：</p><ol><li>docs目录是所有md文档源文件；</li><li>static目录是所有静态文件的存放目录，比如js，css，image文件；</li><li>md_config.toml是全局配置文件，</li><li>summary.md是全局站点的目录；</li><li>index.md是全局首页内容</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>├── docs
│   ├── chapter1
│   │   ├── chapter1.html
│   │   ├── chapter1.md
│   ├── chapter2
│   │   ├── chapter2.html
│   │   ├── chapter2.md
│   ├── index.md
│   └── summary.md
├── md_config.toml
└── static
    ├── css
    │   └── style.css
    ├── images
    └── js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>summary.md格式如下：</p><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">章节1</span>](<span class="token url">chapter1/chapter1.md</span>)</span>
  <span class="token list punctuation">*</span> <span class="token url">[<span class="token content">小节1.1</span>](<span class="token url">chapter1/section1.1.md</span>)</span>
  <span class="token list punctuation">*</span> <span class="token url">[<span class="token content">小节1.2</span>](<span class="token url">chapter1/section1.2.md</span>)</span>
<span class="token list punctuation">*</span> <span class="token url">[<span class="token content">章节2</span>](<span class="token url">chapter2/chapter2.md</span>)</span>
  <span class="token list punctuation">*</span> <span class="token url">[<span class="token content">小节2.1</span>](<span class="token url">chapter2/section2.1.md</span>)</span>
  <span class="token list punctuation">*</span> <span class="token url">[<span class="token content">小节2.2</span>](<span class="token url">chapter2/section2.2.md</span>)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件结构如下：</p><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token key property">title</span> <span class="token punctuation">=</span> <span class="token string">&quot;My Blog&quot;</span>
<span class="token key property">author</span> <span class="token punctuation">=</span> <span class="token string">&quot;Your Name&quot;</span>
<span class="token key property">description</span> <span class="token punctuation">=</span> <span class="token string">&quot;This is my blog.&quot;</span>
<span class="token key property">port</span> <span class="token punctuation">=</span> <span class="token number">9900</span>
<span class="token key property">static_dir</span> <span class="token punctuation">=</span> <span class="token string">&quot;static&quot;</span>
<span class="token key property">md_source_dir</span> <span class="token punctuation">=</span> <span class="token string">&quot;docs&quot;</span>
<span class="token key property">output_dir</span> <span class="token punctuation">=</span> <span class="token string">&quot;.site&quot;</span>
<span class="token key property">default_css_header</span> <span class="token punctuation">=</span> <span class="token string">&quot;&lt;link rel=\\&quot;stylesheet\\&quot; href=\\&quot;./css/style.css\\&quot;&gt;&quot;</span>
<span class="token key property">default_code_header</span> <span class="token punctuation">=</span> <span class="token string">&quot;&lt;link rel=\\&quot;stylesheet\\&quot; href=\\&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.3.1/styles/default.min.css\\&quot;&gt;&lt;script src=\\&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.3.1/highlight.min.js\\&quot;&gt;&lt;/script&gt;&quot;</span>
<span class="token key property">default_code_plugin</span> <span class="token punctuation">=</span> <span class="token string">&quot;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="功能实现和设计" tabindex="-1"><a class="header-anchor" href="#功能实现和设计"><span>功能实现和设计</span></a></h3><p>本质上是一个命令行工具，依赖<code>clap=4.4.0</code>来创建，第一版支持三个命令：</p><ol><li><code>init</code>，初始化一些目录和配置文件</li><li><code>build</code>，构建所有的文件，转为html到指定的输出目录</li><li><code>run</code>，本地运行，在本地预览</li></ol><p>由于要实现md文件转为html，需要借助依赖<code>pulldown-cmark = &quot;0.9&quot;</code>。</p><h2 id="第二步-创建三个命令" tabindex="-1"><a class="header-anchor" href="#第二步-创建三个命令"><span>第二步，创建三个命令</span></a></h2><p>创建main.js，把三个命令写出来：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> matches <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;rust-md-blog-tool&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">&quot;Your Name&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token string">&quot;A simple static site generator&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subcommand</span><span class="token punctuation">(</span><span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;init&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token string">&quot;Initializes the blog with default configuration&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subcommand</span><span class="token punctuation">(</span><span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;build&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token string">&quot;Builds the static site from markdown files&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subcommand</span><span class="token punctuation">(</span><span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;run&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token string">&quot;Runs a local server to view the blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get_matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">match</span> matches<span class="token punctuation">.</span><span class="token function">subcommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;init&quot;</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">init_lib<span class="token punctuation">::</span></span><span class="token function">init_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">build_lib<span class="token punctuation">::</span></span><span class="token function">build_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;run&quot;</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">server_lib<span class="token punctuation">::</span></span><span class="token function">run_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        _ <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid command or no command provided&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第三步实现init命令" tabindex="-1"><a class="header-anchor" href="#第三步实现init命令"><span>第三步实现init命令</span></a></h2><p>init命令就是创建一个默认的配置文件，以及六个目录和一个css文件。<br> 核心代码如下：</p><ol><li>config_content是默认的配置文件内容，可以自定义字符串或者使用模板文件；</li><li>get_style_content是默认的css文件，可以自定义字符串或者使用模板文件；</li><li></li></ol><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>    <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;md_config.toml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> file<span class="token closure-punctuation punctuation">|</span></span> file<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span>config_content<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建所需的目录</span>
    <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span><span class="token string">&quot;docs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;created &#39;docs&#39; Success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span><span class="token string">&quot;.site&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;created &#39;.site&#39; Success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span><span class="token string">&quot;static&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;created &#39;static&#39; Success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span><span class="token string">&quot;static/js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;created &#39;static/js&#39; Success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span><span class="token string">&quot;static/css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;created &#39;static/css&#39; Success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span><span class="token string">&quot;static/images&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;created &#39;static/images&#39; Success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;static/css/style.css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> file<span class="token closure-punctuation punctuation">|</span></span> file<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span><span class="token function">get_style_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Blog initialized with default configuration.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第四步-实现build命令" tabindex="-1"><a class="header-anchor" href="#第四步-实现build命令"><span>第四步，实现build命令</span></a></h2><p>构建所有的md文件流程也很简单：</p>`,24),f=p(`<p>核心代码如下：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">build_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... 读取配置文件和设置目录 ...</span>
    <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token string">&quot;md_config.toml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to read config file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> parsed_config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to parse config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> source_dir <span class="token operator">=</span>  parsed_config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;md_source_dir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">::</span>as_str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">&quot;docs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// .....</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;load config source_dir :{}, output_dir:{}&quot;</span><span class="token punctuation">,</span> source_dir<span class="token punctuation">,</span> output_dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> md_source_dir <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>source_dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> summary_path <span class="token operator">=</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{}{}&quot;</span><span class="token punctuation">,</span> source_dir<span class="token punctuation">,</span> <span class="token string">&quot;/summary.md&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 
    <span class="token comment">// 解析 summary.md 并构建目录HTML</span>
    <span class="token keyword">let</span> toc_html <span class="token operator">=</span> <span class="token function">build_toc_content</span><span class="token punctuation">(</span>summary_path<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 解析每个.md文件 转为HTML</span>
    <span class="token keyword">let</span> md_files <span class="token operator">=</span> <span class="token function">read_dir_recursive</span><span class="token punctuation">(</span>md_source_dir<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;read md dir failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 为每个Markdown文件生成HTML页面</span>
    <span class="token keyword">for</span> entry <span class="token keyword">in</span> md_files <span class="token punctuation">{</span>
        <span class="token keyword">let</span> path <span class="token operator">=</span> entry<span class="token punctuation">;</span>
        <span class="token keyword">if</span> path<span class="token punctuation">.</span><span class="token function">ends_with</span><span class="token punctuation">(</span><span class="token string">&quot;summary.md&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> output_file_path <span class="token operator">=</span> <span class="token function">transform_path</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">,</span> source_dir<span class="token punctuation">,</span> output_dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> path<span class="token punctuation">.</span><span class="token function">extension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> s<span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;md&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> md_content <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> file<span class="token closure-punctuation punctuation">|</span></span> file<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> md_content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to read Markdown file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> parser <span class="token operator">=</span> <span class="token class-name">Parser</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>md_content<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> html_content <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token namespace">html<span class="token punctuation">::</span></span><span class="token function">push_html</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> html_content<span class="token punctuation">,</span> parser<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> _ <span class="token operator">=</span> html_content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;.md&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> output_file <span class="token operator">=</span> output_file_path<span class="token punctuation">.</span><span class="token function">with_extension</span><span class="token punctuation">(</span><span class="token string">&quot;html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;output file:{}&quot;</span><span class="token punctuation">,</span> output_file<span class="token punctuation">.</span><span class="token function">as_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> full_html<span class="token punctuation">;</span>
            <span class="token comment">// 处理index页面逻辑</span>
            full_html <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\\&quot;toc\\&quot;&gt;{}&lt;/div&gt;&lt;div class=\\&quot;content\\&quot;&gt;{}&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="token punctuation">,</span> toc_html<span class="token punctuation">,</span> html_content<span class="token punctuation">)</span><span class="token punctuation">;</span>
            full_html <span class="token operator">=</span> <span class="token function">append_html</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full_html<span class="token punctuation">,</span> <span class="token string">&quot;&lt;/head&gt;&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>default_css_header<span class="token punctuation">,</span> default_code_header<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 增加highlight.js处理代码块</span>
            full_html <span class="token operator">=</span> <span class="token function">append_html</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full_html<span class="token punctuation">,</span> <span class="token string">&quot;&lt;/body&gt;&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>default_code_plugin<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 处理相对路径</span>
            <span class="token keyword">if</span> <span class="token function">contains_sub_dir</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>output_file<span class="token punctuation">,</span> output_dir<span class="token punctuation">)</span><span class="token punctuation">{</span>
                full_html <span class="token operator">=</span> full_html<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;../&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;a href=\\&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;a href=\\&quot;../&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token operator">=</span> output_file<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 创建所有必要的父文件夹</span>
                <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;create html parent dir failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> full_html<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to write HTML file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ... 复制静态资源 ...</span>
    <span class="token comment">// 定义静态资源目录和目标目录</span>
    <span class="token keyword">let</span> static_dir <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>static_dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> output_dir <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>output_dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 复制静态资源</span>
    <span class="token keyword">if</span> static_dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">copy_dir_all</span><span class="token punctuation">(</span>static_dir<span class="token punctuation">,</span> output_dir<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to copy static files&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Site built successfully.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成html文件这里需要注意几个点：</p><ol><li>第一个是文件路径，需要把html生成到配置的输出目录，需要一个path转换逻辑；</li><li>summary里面的链接需要处理，默认是<code>.md</code>，需要转为<code>.html</code>；</li><li>所有链接的相对路径需要处理，根据目录都是用相对路径；</li><li>复制静态资源时，也需要注意文件路径，以及文件夹是否存在。</li></ol><h2 id="第五步-实现run命令" tabindex="-1"><a class="header-anchor" href="#第五步-实现run命令"><span>第五步，实现run命令</span></a></h2><p>这里由于只是本地运行查看html，所以选择tiny_http，启动一个简单的http服务。核心代码如下：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">run_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取配置文件</span>
    <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token string">&quot;md_config.toml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to read config file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> parsed_config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to parse config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> port <span class="token operator">=</span> parsed_config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">::</span>as_str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">&quot;9900&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> output_dir <span class="token operator">=</span> parsed_config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;output_dir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">::</span>as_str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">&quot;.site&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> address <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;0.0.0.0:{}&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> server <span class="token operator">=</span> <span class="token class-name">Server</span><span class="token punctuation">::</span><span class="token function">http</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Running local server on port {}&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> request <span class="token keyword">in</span> server<span class="token punctuation">.</span><span class="token function">incoming_requests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">if</span> request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;/&quot;</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;/index.html&quot;</span> <span class="token comment">// 使用 index.html 作为根路径的默认页面</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> file_path <span class="token operator">=</span> <span class="token class-name">PathBuf</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>output_dir<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>url<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除 URL 的首个斜杠</span>
        <span class="token keyword">match</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file_path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Ok</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">from_data</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_header</span><span class="token punctuation">(</span>
                    <span class="token class-name">Header</span><span class="token punctuation">::</span><span class="token function">from_bytes</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html; charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
                request<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Err</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">from_string</span><span class="token punctuation">(</span><span class="token string">&quot;Not Found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_status_code</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                request<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是，直接返回html会中文乱码，所以统一都加了<code>Content-Type&quot;, &quot;text/html; charset=utf-8</code>。</p><h2 id="第六步-展示成果" tabindex="-1"><a class="header-anchor" href="#第六步-展示成果"><span>第六步，展示成果</span></a></h2><p>新建一个用于测试的博客目录：</p>`,10),b=p("<li>在博客工具目录执行<code>cargo run</code>生成执行的命令文件;</li><li>复制博客工具命令，<code>cp target/debug/rust_md_site_tool ~/.cargo/bin</code>;</li><li>执行 <code>rust_md_site_tool init</code>初始化博客；</li><li>在docs目录新建<code>summary.md</code>和<code>index.md</code>，并在summary里创建好测试的md文档和链接;</li><li><code>rust_md_site_tool build</code>构建目录;</li>",5),g={href:"http://localhost:9900/",target:"_blank",rel:"noopener noreferrer"},_=n("figure",null,[n("img",{src:"https://blog-pics-1252092369.cos.ap-beijing.myqcloud.com/blog-pic.png",alt:"blog-pic",tabindex:"0",loading:"lazy"}),n("figcaption",null,"blog-pic")],-1);function h(q,y){const t=o("ExternalLinkIcon"),c=o("Mermaid");return u(),l("div",null,[k,n("p",null,[s("这个静态博客的工具主要是把md文档转为html静态网站/博客。"),r,s("："),n("a",d,[s("https://github.com/maochunguang/rust-md-site-tool"),a(t)])]),n("p",null,[s("首先说明md文档转为静态网站/博客的原理，就是先做一个目录文档，"),n("a",m,[s("叫做summary.md"),a(t)]),s("，然后其他文档都会链接到这个目录文档里。当把md文档转为html时，需要对链接进行处理，保证链接可以正常跳转，这样就完成了一个简单的md转静态博客工具。")]),v,a(c,{id:"mermaid-120",code:"eJxLL0osyFAIceJSAAJHjad7Gp4u704qzcxJ0VTQ1bVTcNJ41rn6WX//y9be53vXPZvW/mT3Nk2wYqwyYD3OGi+WL342bwKmHqwyYD0uUNNyUyCiz2eve7p3KkQXDjmwPlec7oPJYNPlpvGysfdpXxvENTAVEH1uePS5azxd0vu0Y9vLuTOfNTS+2NrybNcEiC4uAIMRqbM="}),f,n("ol",null,[b,n("li",null,[s("打开浏览器 "),n("a",g,[s("http://localhost:9900/"),a(t)]),s(" ;可以访问index.html;")])]),_])}const S=e(i,[["render",h],["__file","rust-static-blog-tool.html.vue"]]);export{S as default};
